import type { CalculatorState, CalculationResult } from "@/lib/types";
import { formatCurrency } from "@/lib/calculations";

export async function generatePDF(
  state: CalculatorState,
  calculation: CalculationResult
): Promise<void> {
  // Dynamic import to avoid SSR issues
  const { jsPDF } = await import("jspdf");

  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  let yPosition = 20;

  // Helper function to add text with automatic line wrapping
  const addText = (text: string, x: number, y: number, options?: any) => {
    const lines = doc.splitTextToSize(text, pageWidth - 40);
    doc.text(lines, x, y, options);
    return y + lines.length * 6;
  };

  // Header with company logo placeholder
  doc.setFontSize(20);
  doc.setFont("helvetica", "bold");
  yPosition = addText("Interior Design Cost Estimate", 20, yPosition);

  // Add logo placeholder
  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  doc.text("[Company Logo Placeholder]", pageWidth - 60, 20);

  yPosition += 10;

  // Project Details Section
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  yPosition = addText("Project Details", 20, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");
  yPosition = addText(
    `Carpet Area: ${state.projectBasics.carpetAreaSqft} sq ft`,
    20,
    yPosition
  );
  yPosition = addText(
    `City Tier: ${state.projectBasics.cityTier}`,
    20,
    yPosition
  );
  yPosition = addText(
    `Package: ${
      state.projectBasics.model.charAt(0).toUpperCase() +
      state.projectBasics.model.slice(1)
    }`,
    20,
    yPosition
  );
  yPosition = addText(
    `Date: ${new Date().toLocaleDateString("en-IN")}`,
    20,
    yPosition
  );
  yPosition += 10;

  // Cost Breakdown Section
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  yPosition = addText("Cost Breakdown", 20, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");

  // Section totals
  calculation.sectionTotals.forEach((section) => {
    if (yPosition > pageHeight - 40) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFont("helvetica", "bold");
    yPosition = addText(
      `${section.section}: ${formatCurrency(section.subtotal)}`,
      20,
      yPosition
    );
    doc.setFont("helvetica", "normal");

    section.items.forEach((item) => {
      if (yPosition > pageHeight - 30) {
        doc.addPage();
        yPosition = 20;
      }
      yPosition = addText(
        `  â€¢ ${item.label}: ${item.formula} = ${formatCurrency(item.amount)}`,
        25,
        yPosition
      );
    });
    yPosition += 3;
  });

  // Add new page if needed for final calculations
  if (yPosition > pageHeight - 80) {
    doc.addPage();
    yPosition = 20;
  }

  yPosition += 10;

  // Final Calculations
  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  yPosition = addText("Final Calculation", 20, yPosition);
  yPosition += 5;

  doc.setFontSize(10);
  doc.setFont("helvetica", "normal");

  // Draw a table for final calculations
  const tableData = [["Subtotal", formatCurrency(calculation.subtotal)]];

  if (calculation.designFee > 0) {
    tableData.push(["Design Fee (5%)", formatCurrency(calculation.designFee)]);
  }

  if (calculation.transportInstall > 0) {
    tableData.push([
      "Transport & Installation (3%)",
      formatCurrency(calculation.transportInstall),
    ]);
  }

  if (calculation.contingency > 0) {
    tableData.push([
      "Contingency (5%)",
      formatCurrency(calculation.contingency),
    ]);
  }

  tableData.push(["GST (18%)", formatCurrency(calculation.gst)]);

  // Simple table rendering
  tableData.forEach((row) => {
    doc.text(row[0], 20, yPosition);
    doc.text(row[1], pageWidth - 60, yPosition, { align: "right" });
    yPosition += 6;
  });

  // Draw line above total
  doc.line(20, yPosition, pageWidth - 20, yPosition);
  yPosition += 8;

  // Grand Total
  doc.setFontSize(12);
  doc.setFont("helvetica", "bold");
  doc.text("Grand Total", 20, yPosition);
  doc.text(formatCurrency(calculation.grandTotal), pageWidth - 60, yPosition, {
    align: "right",
  });
  yPosition += 15;

  // Disclaimer
  doc.setFontSize(8);
  doc.setFont("helvetica", "normal");
  const disclaimerText =
    "Disclaimer: This is an estimate based on standard rates and may vary based on actual site conditions, material availability, and specific requirements. Final quote will be provided after detailed site survey and consultation.";

  yPosition = addText(disclaimerText, 20, yPosition);

  // Footer
  doc.setFontSize(8);
  doc.text(
    "Generated by Interior Design Cost Calculator (India)",
    20,
    pageHeight - 10
  );
  doc.text(
    new Date().toLocaleString("en-IN"),
    pageWidth - 60,
    pageHeight - 10,
    { align: "right" }
  );

  // Save the PDF
  const fileName = `Interior_Design_Estimate_${
    new Date().toISOString().split("T")[0]
  }.pdf`;
  doc.save(fileName);
}
